@inject HttpClient _httpClient
@inject Providers.TokenAuthenticationStateProvider _tokenAuthStateProvider
@using Newtonsoft.Json

<div>
    <h1>Login</h1>
    <EditForm Model="_loginModel" OnValidSubmit="HandleSubmit">
     
        <div class="form-group">
            <label>Username</label>
            <InputText class="form-control" type="text" @bind-Value="_loginModel.Username" />
            <ValidationMessage For="() => _loginModel.Username" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText  class="form-control" type="password" @bind-Value="_loginModel.Password" />
            <ValidationMessage For="() => _loginModel.Password" />
        </div>

           

            @if (_showError)
            {
            <p>Login Failed!</p>
            
            }

            <button type="submit" class="btn btn-info">Login</button>

    </EditForm>
</div>

@code { LoginModel _loginModel = new LoginModel();
    bool _showError = false;

    private async Task HandleSubmit()
    {
        var loginResult = await _httpClient.PostAsJsonAsync<LoginModel>("/api/login", _loginModel);

        if (loginResult.IsSuccessStatusCode)
        {
            var resultJson = await loginResult.Content.ReadAsStringAsync();
            var loginResultObj = JsonConvert.DeserializeObject<LoginResult>(resultJson);
            await _tokenAuthStateProvider.Login(loginResultObj.Token);
        }
        else
        {
            _showError = true;
        }
    } }
